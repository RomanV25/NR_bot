import os
import logging
import sqlite3
import time
import random
import string
from threading import Thread
from flask import Flask
from telebot import TeleBot, types
from dotenv import load_dotenv

# ==================== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ====================
load_dotenv()

# –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "7933326437:AAHoqJ91uRle8l4KhNlyGjaMURo1JdP2Ssk")
ADMIN_ID = int(os.getenv("ADMIN_ID", "984209612"))
FLASK_PORT = int(os.getenv("PORT", 8080))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

# ==================== –ë–ê–ó–ê –î–ê–ù–ò–• ====================
def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite"""
    with sqlite3.connect('users.db', check_same_thread=False) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY,
                     username TEXT,
                     first_name TEXT,
                     last_name TEXT,
                     registration_date TEXT)''')

        conn.execute('''CREATE TABLE IF NOT EXISTS messages
                     (message_id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER,
                     anon_id TEXT,
                     content_type TEXT,
                     content TEXT,
                     admin_response TEXT,
                     status TEXT DEFAULT 'pending',
                     timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                     FOREIGN KEY(user_id) REFERENCES users(user_id))''')

        conn.execute('''CREATE TABLE IF NOT EXISTS banned_users
                     (user_id INTEGER PRIMARY KEY,
                     reason TEXT,
                     timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')

# ==================== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ====================
def generate_anon_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ ID"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def is_user_banned(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π"""
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM banned_users WHERE user_id=?", (user_id,))
        return cursor.fetchone() is not None

def register_user(user):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with sqlite3.connect('users.db') as conn:
        conn.execute(
            "INSERT OR IGNORE INTO users VALUES (?, ?, ?, ?, ?)",
            (user.id, user.username, user.first_name, user.last_name, time.strftime('%Y-%m-%d %H:%M:%S'))
        )

# ==================== –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ====================
def send_to_admin(message, anon_id):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É"""
    try:
        user = message.from_user
        user_info = (
            f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</b>:\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ –Ü–º'—è: {user.first_name or '–ù–µ–º–∞—î'}\n"
            f"üìõ –ü—Ä—ñ–∑–≤–∏—â–µ: {user.last_name or '–ù–µ–º–∞—î'}\n"
            f"üîó @{user.username or '–ù–µ–º–∞—î'}\n"
            f"üìÖ –ß–∞—Å: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üÜî –ê–Ω–æ–Ω—ñ–º–Ω–∏–π ID: <code>#{anon_id}</code>"
        )

        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content_handlers = {
            'text': lambda: bot.send_message(ADMIN_ID, f"üìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{message.text}\n\n{user_info}"),
            'photo': lambda: bot.send_photo(ADMIN_ID, message.photo[-1].file_id, 
                                         caption=f"üì∑ <b>–§–æ—Ç–æ</b>\n\n{user_info}" + 
                                         (f"\n\n‚úèÔ∏è <b>–ü—ñ–¥–ø–∏—Å:</b> {message.caption}" if message.caption else "")),
            'video': lambda: bot.send_video(ADMIN_ID, message.video.file_id,
                                         caption=f"üé¨ <b>–í—ñ–¥–µ–æ</b>\n\n{user_info}" + 
                                         (f"\n\n‚úèÔ∏è <b>–ü—ñ–¥–ø–∏—Å:</b> {message.caption}" if message.caption else "")),
            'document': lambda: bot.send_document(ADMIN_ID, message.document.file_id,
                                               caption=f"üìé <b>–§–∞–π–ª:</b> {message.document.file_name}\n\n{user_info}")
        }

        if message.content_type in content_handlers:
            content_handlers[message.content_type]()
        else:
            bot.send_message(ADMIN_ID, f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {message.content_type}\n\n{user_info}")

        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –∞–¥–º—ñ–Ω–∞
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{anon_id}"),
            types.InlineKeyboardButton("‚õî –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"ban_{user.id}")
        )
        markup.row(
            types.InlineKeyboardButton("‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ", callback_data=f"done_{anon_id}")
        )
        bot.send_message(ADMIN_ID, "üîπ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ send_to_admin: {e}")
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)[:200]}")

# ==================== –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê ====================
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    register_user(message.from_user)

    if is_user_banned(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —É —Ü—å–æ–º—É –±–æ—Ç—ñ!")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üì¢ –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ'),
        types.KeyboardButton('üì© –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –∞–¥–º—ñ–Ω–æ–º'),
        types.KeyboardButton('‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞')
    )

    bot.send_message(
        message.chat.id,
        "üîí <b>–ê–Ω–æ–Ω—ñ–º–Ω–∏–π —á–∞—Ç-–±–æ—Ç</b>\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∞–Ω–æ–Ω—ñ–º–Ω–æ –∞–±–æ –∑–≤'—è–∑–∞—Ç–∏—Å—å –Ω–∞–ø—Ä—è–º—É.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞')
def show_help(message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É"""
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üì¢ <b>–ù–∞–ø–∏—Å–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ</b> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ–±–∞—á–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "üì© <b>–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –∞–¥–º—ñ–Ω–æ–º</b> - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ\n\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è."
    )

@bot.message_handler(func=lambda m: m.text == 'üì¢ –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ')
def request_anonymous_message(message):
    """–ó–∞–ø–∏—Ç –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    if is_user_banned(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!")
        return

    msg = bot.send_message(
        message.chat.id,
        "‚úèÔ∏è <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n\n"
        "–ú–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏:\n"
        "- –¢–µ–∫—Å—Ç\n"
        "- –§–æ—Ç–æ\n"
        "- –í—ñ–¥–µ–æ\n"
        "- –î–æ–∫—É–º–µ–Ω—Ç–∏\n\n"
        "‚ùó –í–∞—à–∞ –æ—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –±—É–¥–µ –≤–∏–¥–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_anonymous_message)

def process_anonymous_message(message):
    """–û–±—Ä–æ–±–∫–∞ –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        if is_user_banned(message.from_user.id):
            bot.send_message(message.chat.id, "üö´ –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ!")
            return

        anon_id = generate_anon_id()

        with sqlite3.connect('users.db') as conn:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            conn.execute(
                '''INSERT INTO messages 
                (user_id, anon_id, content_type, content) 
                VALUES (?, ?, ?, ?)''',
                (message.from_user.id, anon_id, message.content_type, 
                 message.text or message.caption or message.document.file_name if hasattr(message, 'document') else '')
            )

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
            send_to_admin(message, anon_id)

            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            bot.send_message(
                message.chat.id,
                "‚úÖ <b>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n\n"
                f"üÜî –í–∞—à –∞–Ω–æ–Ω—ñ–º–Ω–∏–π ID: <code>#{anon_id}</code>\n"
                "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å.",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton('üì¢ –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ'),
                    types.KeyboardButton('üì© –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –∞–¥–º—ñ–Ω–æ–º')
                )
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ process_anonymous_message: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )

# ==================== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò ====================
@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_reply(call):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
    anon_id = call.data.split('_')[1]
    bot.answer_callback_query(call.id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è #{anon_id}")

    msg = bot.send_message(
        ADMIN_ID,
        f"‚úçÔ∏è <b>–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∞–Ω–æ–Ω—ñ–º–∞ #{anon_id}:</b>\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∞–±–æ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."
    )
    bot.register_next_step_handler(msg, lambda m: send_reply(m, anon_id))

def send_reply(message, anon_id):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        with sqlite3.connect('users.db') as conn:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            cursor = conn.cursor()
            cursor.execute(
                '''SELECT user_id FROM messages 
                WHERE anon_id=? AND status='pending' 
                ORDER BY timestamp DESC LIMIT 1''',
                (anon_id,)
            )
            result = cursor.fetchone()

            if result:
                user_id = result[0]

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                reply_text = (
                    f"üì© <b>–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
                    f"üÜî –ê–Ω–æ–Ω—ñ–º–Ω–∏–π ID: <code>#{anon_id}</code>\n\n"
                )

                if message.content_type == 'text':
                    bot.send_message(user_id, reply_text + message.text)
                elif message.content_type == 'photo':
                    bot.send_photo(user_id, message.photo[-1].file_id, 
                                 caption=reply_text + (message.caption or ""))
                elif message.content_type == 'document':
                    bot.send_document(user_id, message.document.file_id, 
                                    caption=reply_text + (message.caption or ""))

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                conn.execute(
                    "UPDATE messages SET status='replied', admin_response=? WHERE anon_id=?",
                    (message.text or message.caption or "", anon_id)
                )

                bot.send_message(ADMIN_ID, f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è #{anon_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            else:
                bot.send_message(ADMIN_ID, f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID #{anon_id}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ send_reply: {e}")
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)[:200]}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('ban_'))
def handle_ban(call):
    """–û–±—Ä–æ–±–∫–∞ –±–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = int(call.data.split('_')[1])

    try:
        with sqlite3.connect('users.db') as conn:
            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            conn.execute(
                "INSERT OR IGNORE INTO banned_users (user_id, reason) VALUES (?, ?)",
                (user_id, "–ë–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
            )

            # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ
            conn.execute(
                "UPDATE messages SET status='banned' WHERE user_id=?",
                (user_id,)
            )

            bot.answer_callback_query(call.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!")
            bot.send_message(
                ADMIN_ID,
                f"‚õî <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π</b>\n\n"
                "–í—Å—ñ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ."
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ handle_ban: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('done_'))
def handle_done(call):
    """–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ"""
    anon_id = call.data.split('_')[1]

    try:
        with sqlite3.connect('users.db') as conn:
            conn.execute(
                "UPDATE messages SET status='done' WHERE anon_id=?",
                (anon_id,)
            )

            bot.answer_callback_query(call.id, "–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ!")
            bot.send_message(
                ADMIN_ID,
                f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{anon_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ"
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ handle_done: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ!")

# ==================== FLASK –î–õ–Ø –ñ–ò–í–£–ß–û–°–¢–Ü ====================
app = Flask(__name__)

@app.route('/')
def home():
    return "Telegram Bot is Alive and Running! ü§ñ"

@app.route('/health')
def health():
    return "OK", 200

def run_flask():
    app.run(host='0.0.0.0', port=FLASK_PORT)

def keep_alive():
    Thread(target=run_flask, daemon=True).start()

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == '__main__':
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    init_db()

    # –ó–∞–ø—É—Å–∫ Flask —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    keep_alive()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    try:
        bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

    # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
    while True:
        try:
            logger.info("–ü–æ—á–∞—Ç–æ–∫ polling...")
            bot.polling(none_stop=True, interval=2, timeout=60)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ polling: {e}")
            time.sleep(15)  # –ó–±—ñ–ª—å—à–µ–Ω–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
